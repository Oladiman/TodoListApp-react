{"version":3,"sources":["components/Todoitem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","color","backgroundColor","padding","border","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","removeTodo","Component","borderRadius","cursor","float","Todos","todos","map","Todoitem","key","Header","headerStyle","textDecorationStyle","to","textAlign","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","propTypes","PropTypes","array","isRequired","func","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d9b16d3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class TodoItem extends Component {\n    getStyle=()=>{\n        return{\n            color:'white',\n            backgroundColor:'olive',\n            padding:'10px',\n            border:'1px #ccc dotted',\n            textDecoration:this.props.todo.completed? 'line-through':'none'\n        }\n    }\n\n    render() {\n\n        const {id,title}=this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n               <p>\n                   <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/> {' '}\n                   {title}\n                   <button style={btnStyle} onClick={this.props.removeTodo.bind(this,id)}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n//Proptypes\nTodoItem.propTypes={\n    todo:PropTypes.object.isRequired,\n    onChange:PropTypes.func.isRequired,\n    onClick:PropTypes.func.isRequired,\n}\nconst btnStyle={\n    backgroundColor:'red',\n    color:'white',\n    border:'none',\n    padding:'5px 10px',\n    borderRadius:'50%',\n    cursor:'pointer',\n    float:'right'\n}\n\nexport default TodoItem\n","import React, { Component } from 'react'\nimport Todoitem from './Todoitem';\nimport PropTypes from 'prop-types'\n\nclass Todos extends Component {\n\n    render() {\n        \n        return this.props.todos.map((todo)=>(\n        <Todoitem key={todo.id} todo={todo} markComplete={this.props.markComplete} removeTodo={this.props.removeTodo}/>\n        ));\n    }\n}\n\n//Proptypes\nTodos.propTypes={\n    todos:PropTypes.array.isRequired,\n    markComplete:PropTypes.func.isRequired,\n    removeTodo:PropTypes.func.isRequired,\n}\n\nexport default Todos;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function Header() {\n    return (\n        <div style={headerStyle}>\n            <header>\n                <h1>TodoList App</h1>\n                <Link style={{color:'#fff',textDecorationStyle:'none'}} to='/'>Home</Link> |{ ' '}\n                <Link style={{color:'#fff',textDecorationStyle:'none'}} to='/about'>About</Link>\n            </header>\n        </div>\n    )\n}\n\nconst headerStyle={\n    textAlign:'center',\n    color:'#fff',\n    textDecorationStyle:'dashed',\n    backgroundColor:'#333',\n    padding:'10px'\n}\n","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n    state={\n        title:''\n    }\n    onSubmit=(e)=>{\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title:' '})\n    }\n    onChange=(e)=>this.setState({ [e.target.name] :e.target.value});\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display:'flex'}}>\n                <input \n                type='text' \n                name='title' \n                style={{flex:'10',padding:'5px'}}\n                 placeholder='add to do ...'\n                 value={this.state.title} \n                 onChange={this.onChange}\n                 />\n                 \n                <input \n                type='submit'\n                value='submit'\n                className='btn'\n                style={{flex:'1'}}\n                />\n            </form>\n            )\n    }\n}\n\nexport default AddTodo\n","import React from 'react'\n\n\nexport default function About() {\n    return (\n        <React.Fragment>\n            <h1>This is the z.</h1>\n            <p> It is a quick react review</p>\n\n        </React.Fragment>\n    )\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Todos from './components/Todos'\nimport Header from './components/layout/Header'\nimport AddTodo from './components/AddTodo'\nimport About from './components/pages/About'\nimport axios from 'axios'\n\n\nclass App extends Component{\n  state={\n    todos:[\n    ]\n  }\n\n  componentDidMount(){\n      axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res=>this.setState({todos: res.data}))\n  }\n  \n  //Toggle Complete\n\n  markComplete=(id)=>{\n    this.setState({todos:this.state.todos.map(todo=>{\n      if(todo.id===id){\n        todo.completed=!todo.completed\n      }\n      return todo;\n    })})\n  }\n\n  //remove Todo\n  removeTodo=(id)=>{\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res=>    this.setState({todos:[...this.state.todos.filter(todo=>todo.id!==id)]}))\n    \n}\n\n// addTodo\naddTodo=(title)=>{\n  axios.post('https://jsonplaceholder.typicode.com/todos',{\n    title,\n    completed:false\n      })\n      .then(res=> this.setState({todos:[...this.state.todos,res.data]}));\n\n}\n\n  render(){\n  return (\n    <Router>\n            <div className=\"App\">\n              <div className=\"container\">\n                <Header />\n                <Route  exact path='/' render={()=>(\n                  <React.Fragment>\n                      <AddTodo addTodo={this.addTodo}/>\n                      <Todos todos={this.state.todos} markComplete={this.markComplete} removeTodo={this.removeTodo}/>\n                  </React.Fragment>\n                )}>\n\n                </Route>\n                <Route path='/about'  component={About} />  \n\n\n              </div>\n            </div>\n    </Router>\n\n  );\n  }\n}\n\n//Proptypes\nTodos.propTypes={\n  todos:PropTypes.array.isRequired,\n  addTodo:PropTypes.func.isRequired,\n  markComplete:PropTypes.func.isRequired,\n  removeTodo:PropTypes.func.isRequired,\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}